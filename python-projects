#!/bin/bash

# Default directory to scan (change to your default directory if needed)
SCAN_DIR="$HOME/Dev/Projects/Python"

# Check if the folder exists
if [ ! -d "$SCAN_DIR" ]; then
    echo -e "\033[31mError:\033[0m Directory '$SCAN_DIR' does not exist."
    exit 1
fi

# Inform the user about the scanning process
echo -e "\033[34mScanning directory:\033[0m $SCAN_DIR"

# Use fzf to list only folder names with a tree view preview
SELECTED_NAME=$(find "$SCAN_DIR" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | fzf --preview "tree -C '$SCAN_DIR/{}'" --height=40% --border --ansi)

# Check if a folder was selected
if [ -n "$SELECTED_NAME" ]; then
    ABS_PATH="$SCAN_DIR/$SELECTED_NAME"
    echo -e "\033[32mSelected folder:\033[0m $ABS_PATH"
else
    echo -e "\033[33mNo folder selected.\033[0m"
    exit 1
fi

CONTAINER_NAME=$(basename "$ABS_PATH")

# Check if the container exists
if podman container inspect "$CONTAINER_NAME" &> /dev/null; then
    podman exec -it "$CONTAINER_NAME" bash -c "bash --rcfile <(cat /root/.bashrc; echo 'source .venv/bin/activate')"
else
	CONFIG_FILE="config.yaml"

	# Check if the configuration file exists in the selected directory
	if [ -f "$ABS_PATH/$CONFIG_FILE" ]; then
		  echo -e "\033[34mReading configuration file:\033[0m $ABS_PATH/$CONFIG_FILE"

		  # Extract python-version using yq
		  PYTHON_VERSION=$(yq e '.python-version' "$ABS_PATH/$CONFIG_FILE" | tr -d '"' | tr -d ' ')

		  if [ -n "$PYTHON_VERSION" ]; then
		      echo -e "\033[32mPython Version:\033[0m $PYTHON_VERSION"
		  else
		      echo -e "\033[31mError:\033[0m 'python-version' not found in the configuration file."
		      exit 1
		  fi

		  # Extract open-ports using yq
		  OPEN_PORTS=$(yq e '.open-ports[]' "$ABS_PATH/$CONFIG_FILE" | tr -d '"' | tr -d ' ')

		  if [ -n "$OPEN_PORTS" ]; then
		      echo -e "\033[32mOpen Ports:\033[0m"
		      echo "$OPEN_PORTS"

		      PORT_OPTIONS=""
		      while IFS= read -r port; do
		          PORT_OPTIONS="$PORT_OPTIONS -p $port"
		      done <<< "$OPEN_PORTS"
		  fi
	else
		  echo -e "\033[31mConfiguration file '$CONFIG_FILE' does not exist.\033[0m"
		  PYTHON_VERSION=$(printf "3.9\n3.10\n3.11\n3.12\n3.13" | fzf --height=10% --border --ansi --prompt="Select Python version: ")

		  # Validate the selected Python version
		  if [[ "$PYTHON_VERSION" =~ ^3\.(9|10|11|12|13)$ ]]; then
		      echo -e "\033[32mPython Version:\033[0m $PYTHON_VERSION"
		      echo "python-version: \"$PYTHON_VERSION\"" > "$ABS_PATH/$CONFIG_FILE"
		      echo -e "\033[34mGenerated configuration file:\033[0m $ABS_PATH/$CONFIG_FILE"
		  else
		      echo -e "\033[31mInvalid Python version.\033[0m"
		      exit 1
		  fi
	fi

	# Construct and run the podman command
	podman run \
		--name "$CONTAINER_NAME" \
		--network container-network \
		--privileged \
		$PORT_OPTIONS \
		-v "$ABS_PATH:/workspace:z" \
		-v "$XDG_RUNTIME_DIR/wayland-0:/tmp/wayland-0" \
		-v "$XDG_RUNTIME_DIR:/run/user/$(id -u)" \
		-e WAYLAND_DISPLAY=wayland-0 \
		-e XDG_RUNTIME_DIR=/run/user/$(id -u) \
		-v /usr/share/fonts:/usr/share/fonts:ro \
		-v /etc/fonts:/etc/fonts:ro \
		-v /dev/shm:/dev/shm \
		-v /tmp:/tmp \
		-v "$HOME/.config/nvim:/root/.config/nvim:z" \
		--device /dev/dri \
		--security-opt label=type:container_runtime_t \
		--rm \
		-ti python-multi-version bash -c "
			pyenv global $PYTHON_VERSION && \
			pip install --upgrade pip > /dev/null 2>&1 && \
			pip install 'python-lsp-server[all]' > /dev/null 2>&1 & \
			bash --rcfile <(cat /root/.bashrc; echo 'source .venv/bin/activate')
		"
fi
